{"version":3,"sources":["component/validation.js","component/modal.js","App.js","index.js"],"names":["Validation","props","errMsg","Fragment","Modal","useState","name","setName","mobileNumber","setMobileNumber","address","setAddress","city","setCity","state","setState","postalCode","setPostalCode","AddressType","setAddressType","AddressStatus","setAddressStatus","Present","Permanent","Both","checkedStatus","setCheckedStatus","name_error","set_name_error","mobile_error","set_mobile_error","addrs_error","set_addrs_error","states_error","set_states_error","city_error","set_city_error","zip_error","set_zip_error","isFormValid","setIsFormValid","nameWasTouched","setNameWasTouched","mobileWasTouched","setMobileWasTouched","addrsWasTouched","setAddrsWasTouched","statesWasTouched","setStatesWasTouched","cityWasTouched","setCityWasTouched","zipWasTouched","setZipWasTouched","clearForm","CharRegEx","addressStatusHandler","event","target","value","prevCheckedStatus","useEffect","closeModal","onClose","show","onClick","className","stopPropagation","onChange","type","id","htmlFor","onSubmit","preventDefault","details","addressType","trim","mobile","addrss","states","zip","onAddAddress","onTabChangeToPersonal","onTabChangeToBusiness","onBlur","match","isNaN","length","split","checked","present","permanent","both","disabled","App","personalAddList","setPersonalAddList","businessAddList","setBusinessAddList","showModal","setShowModal","map","addr","prevPersonalAddList","prevBusinessAddList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbc23bbd.chunk.js","sourcesContent":["//write validation here\n\nimport React from \"react\";\n\nconst Validation =(props) => {\n    if (props.errMsg === \"\"){\n        return null;\n    }\n    return <React.Fragment>\n        <span>{props.errMsg}</span>\n    </React.Fragment>\n}\n\nexport default Validation;","import React, { useEffect, useState } from \"react\";\nimport Validation from \"./validation\";\n\nconst Modal = (props) => {\n  const [name, setName] = useState(\"\");\n  const [mobileNumber, setMobileNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [postalCode, setPostalCode] = useState(\"\");\n  const [AddressType, setAddressType] = useState(\"\");\n  const [AddressStatus, setAddressStatus] = useState(\"\");\n  const [checkedStatus, setCheckedStatus] = useState({\n    Present: false,\n    Permanent: false,\n    Both: false,\n  });\n\n  const [name_error, set_name_error] = useState(\"\");\n  const [mobile_error, set_mobile_error] = useState(\"\");\n  const [addrs_error, set_addrs_error] = useState(\"\");\n  const [states_error, set_states_error] = useState(\"\");\n  const [city_error, set_city_error] = useState(\"\");\n  const [zip_error, set_zip_error] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const [nameWasTouched, setNameWasTouched] = useState(false);\n  const [mobileWasTouched, setMobileWasTouched] = useState(false);\n  const [addrsWasTouched, setAddrsWasTouched] = useState(false);\n  const [statesWasTouched, setStatesWasTouched] = useState(false);\n  const [cityWasTouched, setCityWasTouched] = useState(false);\n  const [zipWasTouched, setZipWasTouched] = useState(false);\n  const clearForm = () => {\n    setName(\"\");\n    setAddress(\"\");\n    setMobileNumber(\"\");\n    setState(\"\");\n    setCity(\"\");\n    setPostalCode(\"\");\n    setAddressStatus(\"\");\n    setCheckedStatus({ Present: false, Permanent: false, Both: false });\n    set_name_error(\"\");\n    set_addrs_error(\"\");\n    set_city_error(\"\");\n    set_mobile_error(\"\");\n    set_zip_error(\"\");\n    set_states_error(\"\");\n    setNameWasTouched(false);\n    setMobileWasTouched(false);\n    setAddrsWasTouched(false);\n    setCityWasTouched(false);\n    setStatesWasTouched(false);\n    setZipWasTouched(false);\n    setIsFormValid(false);\n  };\n\n  var CharRegEx = /^[a-zA-Z ]+$/;\n  const nameHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_name_error(\"Please enter a value\");\n    } else if (!event.target.value.trim().match(CharRegEx)) {\n      set_name_error(\"Chatercters from a-z/A-Z allowed\");\n    } else {\n      set_name_error(\"\");\n    }\n    setNameWasTouched(true);\n    setName(event.target.value);\n  };\n  const mobileNumberHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_mobile_error(\"Please enter a value\");\n    } else if (isNaN(event.target.value.trim())) {\n      set_mobile_error(\"Please enter numeric value\");\n    } else if (event.target.value.trim().length !== 10) {\n      set_mobile_error(\"Please enter a valid 10 digit mobile number\");\n    } else {\n      set_mobile_error(\"\");\n    }\n    setMobileWasTouched(true);\n    setMobileNumber(event.target.value);\n  };\n  const addressHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_addrs_error(\"Please enter a value\");\n    } else if (event.target.value.trim().split(\" \").length < 3) {\n      set_addrs_error(\"Address should have a length of atleast 3 words\");\n    } else {\n      set_addrs_error(\"\");\n    }\n    setAddrsWasTouched(true);\n    setAddress(event.target.value);\n  };\n  const stateHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_states_error(\"Please enter a value\");\n    } else if (!event.target.value.trim().match(CharRegEx)) {\n      set_states_error(\"Chatercters from a-z/A-Z allowed\");\n    } else {\n      set_states_error(\"\");\n    }\n    setStatesWasTouched(true);\n    setState(event.target.value);\n  };\n  const cityHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_city_error(\"Please enter a value\");\n    } else if (!event.target.value.trim().match(CharRegEx)) {\n      set_city_error(\"Chatercters from a-z/A-Z allowed\");\n    } else {\n      set_city_error(\"\");\n    }\n    setCityWasTouched(true);\n    setCity(event.target.value);\n  };\n  const postalCodeHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_zip_error(\"Please enter a value\");\n    } else if (isNaN(event.target.value.trim())) {\n      set_zip_error(\"Please enter numeric value\");\n    } else if (event.target.value.trim().length !== 6) {\n      set_zip_error(\"Please enter a valid 6 digit zip pin\");\n    } else {\n      set_zip_error(\"\");\n    }\n    setZipWasTouched(true);\n    setPostalCode(event.target.value);\n  };\n  const addressTypeHandler = (event) => {\n    setAddressType(event.target.value);\n    if (AddressType !== \"\") {\n      clearForm();\n    }\n  };\n  const addressStatusHandler = (event) => {\n    setAddressStatus(event.target.value);\n    setCheckedStatus((prevCheckedStatus) => {\n      return { ...prevCheckedStatus, [event.target.value]: true };\n    });\n  };\n\n  useEffect(() => {\n    {\n      nameWasTouched &&\n        name_error === \"\" &&\n        mobileWasTouched &&\n        mobile_error === \"\" &&\n        statesWasTouched &&\n        states_error === \"\" &&\n        cityWasTouched &&\n        city_error === \"\" &&\n        zipWasTouched &&\n        zip_error === \"\" &&\n        addrsWasTouched &&\n        addrs_error === \"\" &&\n        AddressStatus !== \"\" &&\n        setIsFormValid(true);\n    }\n  }, [\n    name_error,\n    mobile_error,\n    states_error,\n    city_error,\n    zip_error,\n    addrs_error,\n    nameWasTouched,\n    addrsWasTouched,\n    mobileWasTouched,\n    cityWasTouched,\n    statesWasTouched,\n    zipWasTouched,\n    AddressStatus,\n  ]);\n  const onSubmitHandler = (event) => {\n    event.preventDefault();\n    const details = {\n      addressType: AddressType,\n      name: name.trim(),\n      mobile: mobileNumber.trim(),\n      addrss: address.trim(),\n      city: city.trim(),\n      states: state.trim(),\n      zip: postalCode.trim(),\n      type: AddressStatus.trim(),\n    };\n    props.onAddAddress(details);\n    setAddressType(\"\");\n    clearForm();\n    if(AddressType === \"Personal\"){\n      props.onTabChangeToPersonal();\n    } else if (AddressType === \"Business\"){\n      props.onTabChangeToBusiness();\n    }\n  };\n\n  const closeModal = () => {\n    clearForm();\n    setAddressType(\"\");\n    props.onClose();\n  }\n\n  if (!props.show) {\n    return null;\n  }\n  return (\n    <div onClick={closeModal} className=\"bg\">\n      <div\n        onClick={(event) => {\n          event.stopPropagation();\n        }}\n      >\n        <div className=\"pop\">\n          <h3>Fill Address details</h3>\n          <div>\n            <button className=\"close\" onClick={closeModal}>\n              X\n            </button>\n          </div>\n          <div onChange={addressTypeHandler} className=\"radio\">\n            <div>\n              <input\n                type=\"radio\"\n                id=\"personal\"\n                name=\"address-type\"\n                value=\"Personal\"\n              />\n              <label htmlFor=\"personal\">Personal</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                id=\"business\"\n                name=\"address-type\"\n                value=\"Business\"\n              />\n              <label htmlFor=\"business\">Business</label>\n            </div>\n          </div>\n          {AddressType && (\n            <form onSubmit={onSubmitHandler} id=\"address-form\">\n              <div className=\"fields\">\n                <div\n                  onClick={() => {\n                    setNameWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    nameWasTouched &&\n                      name === \"\" &&\n                      set_name_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>Name</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={nameHandler}\n                    value={name}\n                    className=\"input\"\n                  />\n                  <Validation errMsg={name_error}></Validation>\n                </div>\n\n                <div\n                  onClick={() => {\n                    setMobileWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    mobileWasTouched &&\n                      mobileNumber === \"\" &&\n                      set_mobile_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>Mobile No.</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={mobileNumberHandler}\n                    value={mobileNumber}\n                    className=\"input\"\n                  />\n                  <Validation errMsg={mobile_error}></Validation>\n                </div>\n                <div\n                  onClick={() => {\n                    setAddrsWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    addrsWasTouched &&\n                      address === \"\" &&\n                      set_addrs_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>Address</label>\n                  <br></br>\n                  <textarea\n                    type=\"text\"\n                    onChange={addressHandler}\n                    value={address}\n                  />\n                </div>\n                <Validation errMsg={addrs_error}></Validation>\n                <div\n                  onClick={() => {\n                    setCityWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    cityWasTouched &&\n                      city === \"\" &&\n                      set_city_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>City</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={cityHandler}\n                    value={city}\n                    className=\"input\"\n                  />\n                </div>\n                <Validation errMsg={city_error}></Validation>\n                <div\n                  onClick={() => {\n                    setStatesWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    statesWasTouched &&\n                      state === \"\" &&\n                      set_states_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>State</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={stateHandler}\n                    value={state}\n                    className=\"input\"\n                  />\n                </div>\n                <Validation errMsg={states_error}></Validation>\n                <div\n                  onClick={() => {\n                    setZipWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    zipWasTouched &&\n                      postalCode === \"\" &&\n                      set_zip_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>Postal Code/Zip Code</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={postalCodeHandler}\n                    value={postalCode}\n                    className=\"input\"\n                  />\n                </div>\n                <Validation errMsg={zip_error}></Validation>\n                <div className=\"radios\">\n                  <div>\n                    <input\n                      type=\"radio\"\n                      id=\"Present\"\n                      name=\"address-status\"\n                      value=\"Present\"\n                      checked={checkedStatus.present}\n                      onChange={addressStatusHandler}\n                    />\n                    <label htmlFor=\"Present\">Present</label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"radio\"\n                      id=\"Permanent\"\n                      name=\"address-status\"\n                      value=\"Permanent\"\n                      checked={checkedStatus.permanent}\n                      onChange={addressStatusHandler}\n                    />\n                    <label htmlFor=\"Permanent\">Permanent</label>\n                  </div>\n                  <div className=\"\">\n                    <input\n                      type=\"radio\"\n                      id=\"Both\"\n                      name=\"address-status\"\n                      value=\"Both\"\n                      checked={checkedStatus.both}\n                      onChange={addressStatusHandler}\n                    />\n                    <label htmlFor=\"Both\">Both</label>\n                  </div>\n                </div>\n              </div>\n              <div className=\"btns\">\n                <button type=\"submit\" className=\"save\" disabled={!isFormValid}>\n                  Save\n                </button>\n                <button type=\"reset\" className=\"clear\" onClick={clearForm}>\n                  Clear\n                </button>\n              </div>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useState } from \"react\";\n// import Form from \"./component/form\";\nimport Modal from \"./component/modal\";\n// import AddressList from \"./component/AddressList\";\nimport \"./App.css\";\n\nfunction App() {\n  const personal = [\n    {\n      name: \"Sample\",\n      mobile: \"1234567890\",\n      addrss: \"a a a\",\n      city: \"Chennai\",\n      states: \"Tamil Nadu\",\n      zip: \"123456\",\n      type: \"Present\",\n    },\n  ];\n  const business = [\n    {\n      name: \"cool\",\n      mobile: \"1234567890\",\n      addrss: \"a a a\",\n      city: \"Chennai\",\n      states: \"Tamil Nadu\",\n      zip: \"123456\",\n      type: \"Both\",\n    },\n  ];\n  const [personalAddList, setPersonalAddList] = useState(personal);\n  const [businessAddList, setBusinessAddList] = useState(business);\n  const [AddressType, setAddressType] = useState(\"Personal\");\n  const [showModal, setShowModal] = useState(false);\n  const onTabChangeToPersonal = () => {\n    setAddressType(\"Personal\");\n  };\n  const onTabChangeToBusiness = () => {\n    setAddressType(\"Business\");\n  };\n  const onClose = () => {\n    setShowModal(false);\n  };\n  const addButtonHandler = () => {\n    setShowModal(true);\n  };\n  const addingNewAddress = (details) => {\n    details.addressType === \"Personal\" &&\n      setPersonalAddList((prevPersonalAddList) => {\n        return [...prevPersonalAddList, details];\n      });\n    details.addressType === \"Business\" &&\n      setBusinessAddList((prevBusinessAddList) => {\n        return [...prevBusinessAddList, details];\n      });\n    setShowModal(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h2 className=\"App-header\">Address Book</h2>\n      <div>\n        <div>\n          <table>\n            <tbody>\n              <tr>\n                <th\n                  className={` ${AddressType === \"Personal\" ? \"buttons active\" : \"buttons\"}`}\n                  value=\"Personal\"\n                  onClick={onTabChangeToPersonal}\n                >\n                  Personal\n                </th>\n                <th\n                  className={`${AddressType === \"Business\" ? \"buttons active\" : \"buttons\"}`}\n                  value=\"Business\"\n                  onClick={onTabChangeToBusiness}\n                >\n                  Business\n                </th>\n              </tr>\n              <tr>\n                <td>Name</td>\n                <td>Mobile No.</td>\n                <td>Address</td>\n                <td>City</td>\n                <td>State</td>\n                <td>Zip</td>\n                <td>Present/Permanent Address</td>\n              </tr>\n\n              {AddressType === \"Personal\" &&\n                (personalAddList.length === 0 ? (\n                  <h3>No personal records to display</h3>\n                ) : (\n                  personalAddList.map((addr) => (\n                    <tr key={addr.mobile + addr.zip}>\n                      <td>{addr.name}</td>\n                      <td>{addr.mobile}</td>\n                      <td>{addr.addrss}</td>\n                      <td>{addr.city}</td>\n                      <td>{addr.states}</td>\n                      <td>{addr.zip}</td>\n                      <td>{addr.type}</td>\n                    </tr>\n                  ))\n                ))}\n\n              {AddressType === \"Business\" &&\n                (businessAddList.length === 0 ? (\n                  <h3>No business records to display.</h3>\n                ) : (\n                  businessAddList.map((addr) => (\n                    <tr key={addr.mobile + addr.zip}>\n                      <td>{addr.name}</td>\n                      <td>{addr.mobile}</td>\n                      <td>{addr.addrss}</td>\n                      <td>{addr.city}</td>\n                      <td>{addr.states}</td>\n                      <td>{addr.zip}</td>\n                      <td>{addr.type}</td>\n                    </tr>\n                  ))\n                ))}\n            </tbody>\n          </table>\n        </div>\n        <div>\n          <button className=\"add\" onClick={addButtonHandler}>\n            Add\n          </button>\n        </div>\n        <Modal\n          show={showModal}\n          onClose={onClose}\n          onAddAddress={addingNewAddress}\n          onTabChangeToPersonal = {onTabChangeToPersonal}\n          onTabChangeToBusiness = {onTabChangeToBusiness}\n        >\n          {/* <Form onClose={onClose} onAddAddress={addingNewAddress} ></Form> */}\n        </Modal>\n        {/* <AddressList personal={personalAddList} business={businessAddList} /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}