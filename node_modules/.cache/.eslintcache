[{"D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\index.js":"1","D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\App.js":"2","D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\component\\form.js":"3","D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\component\\AddressList.js":"4","D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\component\\modal.js":"5","D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\component\\validation.js":"6"},{"size":168,"mtime":1647349734198,"results":"7","hashOfConfig":"8"},{"size":4493,"mtime":1656179810989,"results":"9","hashOfConfig":"8"},{"size":7015,"mtime":1648562647045,"results":"10","hashOfConfig":"8"},{"size":2513,"mtime":1648457333461,"results":"11","hashOfConfig":"8"},{"size":13167,"mtime":1656178544692,"results":"12","hashOfConfig":"8"},{"size":256,"mtime":1656180139647,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"4cabiw",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\index.js",[],["29","30"],"D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\App.js",[],"D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\component\\form.js",[],"D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\component\\AddressList.js",[],["31","32"],"D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\component\\modal.js",["33"],"import React, { useEffect, useState } from \"react\";\nimport Validation from \"./validation\";\n\nconst Modal = (props) => {\n  const [name, setName] = useState(\"\");\n  const [mobileNumber, setMobileNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [postalCode, setPostalCode] = useState(\"\");\n  const [AddressType, setAddressType] = useState(\"\");\n  const [AddressStatus, setAddressStatus] = useState(\"\");\n  const [checkedStatus, setCheckedStatus] = useState({\n    Present: false,\n    Permanent: false,\n    Both: false,\n  });\n\n  const [name_error, set_name_error] = useState(\"\");\n  const [mobile_error, set_mobile_error] = useState(\"\");\n  const [addrs_error, set_addrs_error] = useState(\"\");\n  const [states_error, set_states_error] = useState(\"\");\n  const [city_error, set_city_error] = useState(\"\");\n  const [zip_error, set_zip_error] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const [nameWasTouched, setNameWasTouched] = useState(false);\n  const [mobileWasTouched, setMobileWasTouched] = useState(false);\n  const [addrsWasTouched, setAddrsWasTouched] = useState(false);\n  const [statesWasTouched, setStatesWasTouched] = useState(false);\n  const [cityWasTouched, setCityWasTouched] = useState(false);\n  const [zipWasTouched, setZipWasTouched] = useState(false);\n  const clearForm = () => {\n    setName(\"\");\n    setAddress(\"\");\n    setMobileNumber(\"\");\n    setState(\"\");\n    setCity(\"\");\n    setPostalCode(\"\");\n    setAddressStatus(\"\");\n    setCheckedStatus({ Present: false, Permanent: false, Both: false });\n    set_name_error(\"\");\n    set_addrs_error(\"\");\n    set_city_error(\"\");\n    set_mobile_error(\"\");\n    set_zip_error(\"\");\n    set_states_error(\"\");\n    setNameWasTouched(false);\n    setMobileWasTouched(false);\n    setAddrsWasTouched(false);\n    setCityWasTouched(false);\n    setStatesWasTouched(false);\n    setZipWasTouched(false);\n  };\n\n  var CharRegEx = /^[a-zA-Z ]+$/;\n  const nameHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_name_error(\"Please enter a value\");\n    } else if (!event.target.value.trim().match(CharRegEx)) {\n      set_name_error(\"Chatercters from a-z/A-Z allowed\");\n    } else {\n      set_name_error(\"\");\n    }\n    setNameWasTouched(true);\n    setName(event.target.value);\n  };\n  const mobileNumberHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_mobile_error(\"Please enter a value\");\n    } else if (isNaN(event.target.value.trim())) {\n      set_mobile_error(\"Please enter numeric value\");\n    } else if (event.target.value.trim().length !== 10) {\n      set_mobile_error(\"Please enter a valid 10 digit mobile number\");\n    } else {\n      set_mobile_error(\"\");\n    }\n    setMobileWasTouched(true);\n    setMobileNumber(event.target.value);\n  };\n  const addressHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_addrs_error(\"Please enter a value\");\n    } else if (event.target.value.trim().split(\" \").length < 3) {\n      set_addrs_error(\"Address should have a length of atleast 3 words\");\n    } else {\n      set_addrs_error(\"\");\n    }\n    setAddrsWasTouched(true);\n    setAddress(event.target.value);\n  };\n  const stateHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_states_error(\"Please enter a value\");\n    } else if (!event.target.value.trim().match(CharRegEx)) {\n      set_states_error(\"Chatercters from a-z/A-Z allowed\");\n    } else {\n      set_states_error(\"\");\n    }\n    setStatesWasTouched(true);\n    setState(event.target.value);\n  };\n  const cityHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_city_error(\"Please enter a value\");\n    } else if (!event.target.value.trim().match(CharRegEx)) {\n      set_city_error(\"Chatercters from a-z/A-Z allowed\");\n    } else {\n      set_city_error(\"\");\n    }\n    setCityWasTouched(true);\n    setCity(event.target.value);\n  };\n  const postalCodeHandler = (event) => {\n    if (event.target.value.trim() === \"\") {\n      set_zip_error(\"Please enter a value\");\n    } else if (isNaN(event.target.value.trim())) {\n      set_zip_error(\"Please enter numeric value\");\n    } else if (event.target.value.trim().length !== 6) {\n      set_zip_error(\"Please enter a valid 6 digit zip pin\");\n    } else {\n      set_zip_error(\"\");\n    }\n    setZipWasTouched(true);\n    setPostalCode(event.target.value);\n  };\n  const addressTypeHandler = (event) => {\n    setAddressType(event.target.value);\n    if (AddressType !== \"\") {\n      clearForm();\n    }\n  };\n  const addressStatusHandler = (event) => {\n    setAddressStatus(event.target.value);\n    setCheckedStatus((prevCheckedStatus) => {\n      return { ...prevCheckedStatus, [event.target.value]: true };\n    });\n  };\n\n  useEffect(() => {\n    {\n      nameWasTouched &&\n        name_error === \"\" &&\n        mobileWasTouched &&\n        mobile_error === \"\" &&\n        statesWasTouched &&\n        states_error === \"\" &&\n        cityWasTouched &&\n        city_error === \"\" &&\n        zipWasTouched &&\n        zip_error === \"\" &&\n        addrsWasTouched &&\n        addrs_error === \"\" &&\n        AddressStatus !== \"\" &&\n        setIsFormValid(true);\n    }\n  }, [\n    name_error,\n    mobile_error,\n    states_error,\n    city_error,\n    zip_error,\n    addrs_error,\n    nameWasTouched,\n    addrsWasTouched,\n    mobileWasTouched,\n    cityWasTouched,\n    statesWasTouched,\n    zipWasTouched,\n    AddressStatus,\n  ]);\n  const onSubmitHandler = (event) => {\n    event.preventDefault();\n    const details = {\n      addressType: AddressType,\n      name: name.trim(),\n      mobile: mobileNumber.trim(),\n      addrss: address.trim(),\n      city: city.trim(),\n      states: state.trim(),\n      zip: postalCode.trim(),\n      type: AddressStatus.trim(),\n    };\n    props.onAddAddress(details);\n    setAddressType(\"\");\n    clearForm();\n    if(AddressType === \"Personal\"){\n      props.onTabChangeToPersonal();\n    } else if (AddressType === \"Business\"){\n      props.onTabChangeToBusiness();\n    }\n  };\n\n  const closeModal = () => {\n    clearForm();\n    setAddressType(\"\");\n    props.onClose();\n  }\n\n  if (!props.show) {\n    return null;\n  }\n  return (\n    <div onClick={closeModal} className=\"bg\">\n      <div\n        onClick={(event) => {\n          event.stopPropagation();\n        }}\n      >\n        <div className=\"pop\">\n          <h3>Fill Address details</h3>\n          <div>\n            <button className=\"close\" onClick={closeModal}>\n              X\n            </button>\n          </div>\n          <div onChange={addressTypeHandler} className=\"radio\">\n            <div>\n              <input\n                type=\"radio\"\n                id=\"personal\"\n                name=\"address-type\"\n                value=\"Personal\"\n              />\n              <label htmlFor=\"personal\">Personal</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                id=\"business\"\n                name=\"address-type\"\n                value=\"Business\"\n              />\n              <label htmlFor=\"business\">Business</label>\n            </div>\n          </div>\n          {AddressType && (\n            <form onSubmit={onSubmitHandler} id=\"address-form\">\n              <div className=\"fields\">\n                <div\n                  onClick={() => {\n                    setNameWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    nameWasTouched &&\n                      name === \"\" &&\n                      set_name_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>Name</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={nameHandler}\n                    value={name}\n                    className=\"input\"\n                  />\n                  <Validation errMsg={name_error}></Validation>\n                </div>\n\n                <div\n                  onClick={() => {\n                    setMobileWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    mobileWasTouched &&\n                      mobileNumber === \"\" &&\n                      set_mobile_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>Mobile No.</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={mobileNumberHandler}\n                    value={mobileNumber}\n                    className=\"input\"\n                  />\n                  <Validation errMsg={mobile_error}></Validation>\n                </div>\n                <div\n                  onClick={() => {\n                    setAddrsWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    addrsWasTouched &&\n                      address === \"\" &&\n                      set_addrs_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>Address</label>\n                  <br></br>\n                  <textarea\n                    type=\"text\"\n                    onChange={addressHandler}\n                    value={address}\n                  />\n                </div>\n                <Validation errMsg={addrs_error}></Validation>\n                <div\n                  onClick={() => {\n                    setCityWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    cityWasTouched &&\n                      city === \"\" &&\n                      set_city_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>City</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={cityHandler}\n                    value={city}\n                    className=\"input\"\n                  />\n                </div>\n                <Validation errMsg={city_error}></Validation>\n                <div\n                  onClick={() => {\n                    setStatesWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    statesWasTouched &&\n                      state === \"\" &&\n                      set_states_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>State</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={stateHandler}\n                    value={state}\n                    className=\"input\"\n                  />\n                </div>\n                <Validation errMsg={states_error}></Validation>\n                <div\n                  onClick={() => {\n                    setZipWasTouched(true);\n                  }}\n                  onBlur={() => {\n                    zipWasTouched &&\n                      postalCode === \"\" &&\n                      set_zip_error(\"Please Enter a value\");\n                  }}\n                >\n                  <label>Postal Code/Zip Code</label>\n                  <br></br>\n                  <input\n                    type=\"text\"\n                    onChange={postalCodeHandler}\n                    value={postalCode}\n                    className=\"input\"\n                  />\n                </div>\n                <Validation errMsg={zip_error}></Validation>\n                <div className=\"radios\">\n                  <div>\n                    <input\n                      type=\"radio\"\n                      id=\"Present\"\n                      name=\"address-status\"\n                      value=\"Present\"\n                      checked={checkedStatus.present}\n                      onChange={addressStatusHandler}\n                    />\n                    <label htmlFor=\"Present\">Present</label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"radio\"\n                      id=\"Permanent\"\n                      name=\"address-status\"\n                      value=\"Permanent\"\n                      checked={checkedStatus.permanent}\n                      onChange={addressStatusHandler}\n                    />\n                    <label htmlFor=\"Permanent\">Permanent</label>\n                  </div>\n                  <div className=\"\">\n                    <input\n                      type=\"radio\"\n                      id=\"Both\"\n                      name=\"address-status\"\n                      value=\"Both\"\n                      checked={checkedStatus.both}\n                      onChange={addressStatusHandler}\n                    />\n                    <label htmlFor=\"Both\">Both</label>\n                  </div>\n                </div>\n              </div>\n              <div className=\"btns\">\n                <button type=\"submit\" className=\"save\" disabled={!isFormValid}>\n                  Save\n                </button>\n                <button type=\"reset\" className=\"clear\" onClick={clearForm}>\n                  Clear\n                </button>\n              </div>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","D:\\Projects\\MERN\\react_project\\react-complete-guide\\Wings1 project\\src\\component\\validation.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"38"},{"ruleId":"36","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":141,"column":5,"nodeType":"42","messageId":"43","endLine":156,"endColumn":6},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],["44"],["45"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]